
1.)* What is Version Control System(V.C.S.)?
     
-> A Version Control System (VCS) is like a smart system that helps you manage your files, keeping track of changes you make to them. It's like a time machine for your documents.


2.)* Why we need any Version Control System(v.C.S)?

-> We need Version Control Systems (VCS) for these key reasons:

        History Tracking: VCS keeps a record of changes made to your project, acting like a built-in time machine.

        Collaboration: It enables teamwork by ensuring everyone works on the latest project version and merges changes smoothly.

	Backup: Your code is backed up, so you can recover it if local files are lost.

	Experimentation: VCS encourages trying new ideas in separate branches without affecting the main project.

	Documentation: Each change comes with notes, aiding in understanding why changes were made.

	Synchronization: Work from different devices seamlessly by pushing and pulling changes.

   In short, VCS is your code safety net, simplifying collaboration, tracking, and maintenance.    


3.)* What is the difference between SVN and Git?
   SVN and Git are both Version Control Systems, but they differ in key ways:

Centralized vs. Distributed:

SVN is centralized, where code is stored on a central server.
Git is distributed, where each developer has a complete copy of the repository.
Performance:

SVN can be slower due to network dependency.
Git is faster since most operations are local.
Branching and Merging:

SVN branching and merging can be complex.
Git excels in branching and merging with ease.
History:

SVN stores file-based changes.
Git stores snapshots of the entire repository.
Offline Work:

SVN often requires a network connection.
Git allows you to work offline.
Learning Curve:

SVN is easier for beginners.
Git has a steeper learning curve but offers more power.
Popular Projects:

Git is widely used, especially in open-source projects.
SVN is less popular today.
The choice between them depends on your specific needs and preferences.
	
4.)* Which VCS you prefer? SVN Or Git? Why?
  I prefer Git over SVN for several reasons:

Distributed System: Git is a distributed VCS, which means I can work offline, commit changes locally, and later synchronize with the remote repository. This is a huge advantage, especially when traveling or working in locations with limited internet access.

Branching and Merging: Git makes branching and merging incredibly easy. I can create feature branches, experiment, and merge changes with minimal hassle. This flexibility promotes a more organized and efficient workflow.

Speed: Git is significantly faster than SVN. Operations like cloning and committing are almost instantaneous because they are mostly performed locally. This speed boosts productivity.

Community and Ecosystem: Git has a massive user base and an extensive ecosystem of tools and services, such as GitHub and GitLab. This community support and integration enhance collaboration and project management.

History and Snapshots: Git stores the entire history of a project as snapshots, making it easier to understand changes over time and enabling more advanced version control techniques.

Popularity: Git is the industry standard, and its popularity is an asset when collaborating with others. Most open-source projects and software companies use Git.

While Git offers many advantages, SVN may still be a valid choice for some specific scenarios or legacy projects. However, in most cases, I would opt for Git due to its flexibility and efficiency.



5.)* What are the advantages of Git over SVN?
Git is better than SVN because it's faster, supports easy branching and merging, and works offline. Git has a large community, is open source, and is the industry standard. It's lightweight, offers better data integrity, and has advanced tools. SVN can be suitable for some older projects or established environments.

  
6.) Why we call Git as Distributed VCS?
   
Git is called a distributed version control system (DVCS) because each developer's local copy of the repository contains the entire history and can operate independently, including committing changes and creating branches. This decentralized approach allows for greater flexibility and collaboration among team members.   	

7.) Can you explain Git's End-to-End work flow?
Git's end-to-end workflow typically involves several key steps:

Clone: Start by creating a local copy of a Git repository on your machine using the git clone command. This local copy contains all the project files and the complete version history.

Edit: Make changes to the project files within your local copy.

Stage: After making changes, you can choose which files to include in the next commit by staging them. Use git add to stage files.

Commit: Once you've staged your changes, commit them to the local repository with a meaningful message using git commit. This creates a snapshot of your changes.

Branch: You can create branches in Git to work on new features or fixes independently. Use git branch to create a branch and git checkout to switch between branches.

Merge: When you're ready to incorporate your changes into the main project, you can merge the changes from one branch into another. Use git merge for this.

Push: To share your committed changes with a remote repository (e.g., on a server), use git push. This uploads your local commits to the remote repository.

Pull: If others have made changes to the remote repository, you can fetch and merge those changes into your local copy using git pull.

Conflict Resolution: Git provides tools for resolving conflicts when multiple contributors make changes to the same part of a file.

History Inspection: You can inspect the project's history using git log to view commit logs and git diff to compare changes between commits.

Remote Collaboration: Developers in a team can collaborate by pulling and pushing changes to and from a shared remote repository.

This workflow is highly flexible and scalable, making Git a powerful tool for version control in software development.

8.) How do you clone the code using git?

  	
To clone a Git repository:

Open your terminal.
Use git clone followed by the repository URL.
Press Enter.
Your local copy will be created.


9.)* What is the difference between Commit & Push?
Commit: Committing in Git means you're saving your changes to your local repository. It's like taking a snapshot of your code at that moment. It's essential for tracking your progress and making your changes permanent locally.

Push: Pushing in Git means you're sending your committed changes from your local repository to a remote repository, typically on a platform like GitHub or GitLab. It allows you to share your work and collaborate with others.

In short, commit is local, and push is for sharing your work with others.
	  

10.)* What is the difference bet'n Push and Pull?
Push: Pushing in Git means sending your local commits to a remote repository. It's typically used to share your changes with others or to keep a backup of your work on a remote server.

Pull: Pulling in Git refers to fetching changes from a remote repository and merging them into your local branch. It's used to update your local copy with changes made by others.

In simple terms, push is for sending your changes out, while pull is for getting changes in.
	          

11.) Can you explain Git architecture?
              Git has three main components:

Working Directory: This is where you edit, create, and delete files. These changes are not tracked by Git until you add them to the staging area.

Staging Area (Index): This is an intermediate area where you can organize and review your changes before committing them. Files in the staging area are part of the next commit.

Repository: This is where Git stores all the snapshots of your project over time. It consists of two parts: the commit history (where all changes are saved) and the index (a.k.a. staging area).

Key Concepts:

Commit: A commit is a snapshot of your project at a specific point in time. Commits form the commit history, and each has a unique SHA-1 hash for identification.

Branches: Branches are pointers to specific commits. Creating a new branch allows you to work on a specific feature or bug fix without affecting the main codebase.

Remote Repository: This is a copy of the repository on a remote server (like GitHub or Bitbucket). You can push your changes to a remote repository or pull changes from it.

Clone: Cloning a repository creates a copy on your local machine, allowing you to work on the project.

Pull and Push: Pulling means fetching changes from a remote repository and merging them into your local branch. Pushing sends your local changes to the remote repository.

In essence, Git's architecture is centered around commits, branches, and remotes. Commits create a historical record of changes, branches allow parallel development, and remotes facilitate collaboration with others. The working directory and staging area enable you to manage and organize your changes before making a commit.
         

12.)* What is the diff. bet'n Centralized and Distributed VCS.




13.) Have you ever created Remote repositories in Git? How?
   
	    
14.) What happens if I delete .git folder?
	
										     

15.) How do you configure username, email and editor first time in Git?
	

16.) Where Git stores configuration details?
	
17.)* What is the advantage of STAGE in Git?
	

18.) Git log options related questions
	
19. What is SHA-1? How Git uses this?
	
   
20.)* I have a file modified in my Working directory. How do you show the content diff?

     

21.)* How do you show the content diff of a file which is staged?

    

22.) How do you delete and rename a file in Git?

    
23.)** What is your branching stratogy? OR Can you explain your release process/Stratogy?
					--
    	
 

24.)** What branching model you suggest for parellel development?

    	

25.) Developer fixes a bug. How do you take the change to production?

   	

26.)** Explain defferent branching models that you have worked-on.
    
    	


27.) Did you work on merging the code in Git?
    
   	


28.)* How do you merge the code in Git?

    

29.)* What is merge? 

	
30.)*What is conflict? OR When do we get conflict?

	

31.)* What is fast-forward merge in Git?
 	
	

32.)* What is the difference between Merge and Rebase?
	
	
33.)* How do you resolve the conflit in Git?
	
	

34.)* What kind of conflicts you have seen?

	

35.) Who resolves the conflicts?
	
	


36.)** What is the difference between branch and tag? 

	 

37.) When do you create a branch and tag?
	
	

38.) How do you create a branch and switch to that using single command?
	
	


